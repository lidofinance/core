import { expect } from "chai";
import { ContractTransactionReceipt, keccak256 } from "ethers";
import { ethers } from "hardhat";

import { HardhatEthersSigner } from "@nomicfoundation/hardhat-ethers/signers";
import { setCode } from "@nomicfoundation/hardhat-network-helpers";

import {
  ACL,
  DepositContract__MockForVaultHub,
  Lido,
  LidoLocator,
  OperatorGrid,
  OssifiableProxy,
  PredepositGuarantee__HarnessForFactory,
  StakingVault__MockForVaultHub,
  VaultFactory__MockForVaultHub,
  VaultHub__HarnessForReporting,
} from "typechain-types";

import { ether, findEvents, GENESIS_FORK_VERSION, getCurrentBlockTimestamp, impersonate } from "lib";
import { TOTAL_BASIS_POINTS } from "lib/constants";
import { createVaultsReportTree, VaultReportItem } from "lib/protocol/helpers/vaults";

import { deployLidoDao, updateLidoLocatorImplementation } from "test/deploy";
import { Snapshot, VAULTS_RELATIVE_SHARE_LIMIT_BP } from "test/suite";

const DEFAULT_TIER_SHARE_LIMIT = ether("1000");
const SHARE_LIMIT = ether("1");
const RESERVE_RATIO_BP = 10_00n;
const FORCED_REBALANCE_THRESHOLD_BP = 8_00n;
const INFRA_FEE_BP = 5_00n;
const LIQUIDITY_FEE_BP = 4_00n;
const RESERVATION_FEE_BP = 1_00n;

const CONNECT_DEPOSIT = ether("1");

describe("VaultHub.sol:reporting", () => {
  let deployer: HardhatEthersSigner;
  let user: HardhatEthersSigner;
  let whale: HardhatEthersSigner;

  let predepositGuarantee: PredepositGuarantee__HarnessForFactory;
  let locator: LidoLocator;
  let vaultHub: VaultHub__HarnessForReporting;
  let depositContract: DepositContract__MockForVaultHub;
  let vaultFactory: VaultFactory__MockForVaultHub;
  let operatorGrid: OperatorGrid;
  let operatorGridImpl: OperatorGrid;
  let proxy: OssifiableProxy;
  let lido: Lido;
  let acl: ACL;

  let codehash: string;
  let vaultCode: string;

  let originalState: string;

  async function createVault(factory: VaultFactory__MockForVaultHub) {
    const vaultCreationTx = (await factory
      .createVault(await user.getAddress(), await user.getAddress(), predepositGuarantee)
      .then((tx) => tx.wait())) as ContractTransactionReceipt;

    const events = findEvents(vaultCreationTx, "VaultCreated");
    const vaultCreatedEvent = events[0];

    const vault = await ethers.getContractAt("StakingVault__MockForVaultHub", vaultCreatedEvent.args.vault, user);
    return vault;
  }

  async function createAndConnectVault(
    factory: VaultFactory__MockForVaultHub,
    options?: {
      shareLimit?: bigint;
      reserveRatioBP?: bigint;
      forcedRebalanceThresholdBP?: bigint;
      infraFeeBP?: bigint;
      liquidityFeeBP?: bigint;
      reservationFeeBP?: bigint;
    },
  ) {
    const vault = await createVault(factory);
    await vault.connect(user).fund({ value: CONNECT_DEPOSIT });
    await vault.connect(user).lock(CONNECT_DEPOSIT);

    const defaultTierId = await operatorGrid.DEFAULT_TIER_ID();
    await operatorGrid.connect(user).alterTiers(
      [defaultTierId],
      [
        {
          shareLimit: options?.shareLimit ?? SHARE_LIMIT,
          reserveRatioBP: options?.reserveRatioBP ?? RESERVE_RATIO_BP,
          forcedRebalanceThresholdBP: options?.forcedRebalanceThresholdBP ?? FORCED_REBALANCE_THRESHOLD_BP,
          infraFeeBP: options?.infraFeeBP ?? INFRA_FEE_BP,
          liquidityFeeBP: options?.liquidityFeeBP ?? LIQUIDITY_FEE_BP,
          reservationFeeBP: options?.reservationFeeBP ?? RESERVATION_FEE_BP,
        },
      ],
    );
    await vaultHub.connect(user).connectVault(vault);

    return vault;
  }

  before(async () => {
    [deployer, user, whale] = await ethers.getSigners();

    predepositGuarantee = await ethers.deployContract("PredepositGuarantee__HarnessForFactory", [
      GENESIS_FORK_VERSION,
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      0,
    ]);

    ({ lido, acl } = await deployLidoDao({
      rootAccount: deployer,
      initialized: true,
      locatorConfig: { predepositGuarantee },
    }));

    locator = await ethers.getContractAt("LidoLocator", await lido.getLidoLocator(), deployer);

    await acl.createPermission(user, lido, await lido.RESUME_ROLE(), deployer);
    await acl.createPermission(user, lido, await lido.STAKING_CONTROL_ROLE(), deployer);

    await lido.connect(user).resume();
    await lido.connect(user).setMaxExternalRatioBP(TOTAL_BASIS_POINTS);

    await lido.connect(whale).submit(deployer, { value: ether("1000.0") });

    depositContract = await ethers.deployContract("DepositContract__MockForVaultHub");

    // OperatorGrid
    operatorGridImpl = await ethers.deployContract("OperatorGrid", [locator], { from: deployer });
    proxy = await ethers.deployContract("OssifiableProxy", [operatorGridImpl, deployer, new Uint8Array()], deployer);
    operatorGrid = await ethers.getContractAt("OperatorGrid", proxy, deployer);
    const defaultTierParams = {
      shareLimit: DEFAULT_TIER_SHARE_LIMIT,
      reserveRatioBP: 2000n,
      forcedRebalanceThresholdBP: 1800n,
      infraFeeBP: 500n,
      liquidityFeeBP: 400n,
      reservationFeeBP: 100n,
    };
    await operatorGrid.initialize(user, defaultTierParams);
    await operatorGrid.connect(user).grantRole(await operatorGrid.REGISTRY_ROLE(), user);

    const vaultHubImpl = await ethers.deployContract("VaultHub__HarnessForReporting", [
      locator,
      await locator.lido(),
      VAULTS_RELATIVE_SHARE_LIMIT_BP,
    ]);

    proxy = await ethers.deployContract("OssifiableProxy", [vaultHubImpl, deployer, new Uint8Array()]);

    const vaultHubAdmin = await ethers.getContractAt("VaultHub", proxy);
    await vaultHubAdmin.initialize(deployer);

    vaultHub = await ethers.getContractAt("VaultHub__HarnessForReporting", proxy, user);
    await vaultHubAdmin.grantRole(await vaultHub.PAUSE_ROLE(), user);
    await vaultHubAdmin.grantRole(await vaultHub.RESUME_ROLE(), user);
    await vaultHubAdmin.grantRole(await vaultHub.VAULT_MASTER_ROLE(), user);
    await vaultHubAdmin.grantRole(await vaultHub.VAULT_CODEHASH_SET_ROLE(), user);

    await updateLidoLocatorImplementation(await locator.getAddress(), { vaultHub, predepositGuarantee, operatorGrid });

    const stakingVaultImpl = await ethers.deployContract("StakingVault__MockForVaultHub", [
      await vaultHub.getAddress(),
      depositContract,
    ]);

    vaultFactory = await ethers.deployContract("VaultFactory__MockForVaultHub", [await stakingVaultImpl.getAddress()]);
    const vault = await createVault(vaultFactory);

    vaultCode = await ethers.provider.getCode(await vault.getAddress());
    codehash = keccak256(vaultCode);
    await vaultHub.connect(user).addVaultProxyCodehash(codehash);
  });

  beforeEach(async () => (originalState = await Snapshot.take()));

  afterEach(async () => await Snapshot.restore(originalState));


});
